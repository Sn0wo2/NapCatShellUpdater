name: ci-release
on:
  push:
    branches: [ "main", "dev" ]

permissions:
  contents: write
  actions: read

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@main
        with:
          go-version: "1.24.3"

      - name: Checkout code
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Get dependencies
        run: go mod tidy

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test $(go list ./...)

      - name: Vet
        run: go vet $(go list ./...)

      - name: Extract version from commit message
        id: extract_version
        run: |
          # Ensure the commit message follows the 'Release vX.Y.Z' format.
          VERSION=$(echo "${{ github.event.head_commit.message }}" | sed -nE 's/.*Release (v[0-9]+\.[0-9]+\.[0-9]+).*/\1/p')
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Build for all platforms
        if: env.version != ''
        id: build
        run: |
          mkdir -p build
          platforms=(
          "aix/ppc64"
          "android/386"
          "android/amd64"
          "android/arm"
          "android/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "dragonfly/amd64"
          "freebsd/386"
          "freebsd/amd64"
          "freebsd/arm"
          "freebsd/arm64"
          "freebsd/riscv64"
          "illumos/amd64"
          "ios/amd64"
          "ios/arm64"
          "js/wasm"
          "linux/386"
          "linux/amd64"
          "linux/arm"
          "linux/arm64"
          "linux/loong64"
          "linux/mips"
          "linux/mips64"
          "linux/mips64le"
          "linux/mipsle"
          "linux/ppc64"
          "linux/ppc64le"
          "linux/riscv64"
          "linux/s390x"
          "netbsd/386"
          "netbsd/amd64"
          "netbsd/arm"
          "netbsd/arm64"
          "openbsd/386"
          "openbsd/amd64"
          "openbsd/arm"
          "openbsd/arm64"
          "openbsd/ppc64"
          "openbsd/riscv64"
          "plan9/386"
          "plan9/amd64"
          "solaris/amd64"
          "wasip1/wasm"
          "windows/386"
          "windows/amd64"
          "windows/arm"
          "windows/arm64"
          )
          
          for platform in "${platforms[@]}"; do
          GOOS=${platform%/*}
          GOARCH=${platform#*/}
          EXTS=""
          if [[ "$GOOS" == "windows" ]]; then
          EXTS=".exe"
          fi
          
          if [[ "$GOOS" == "js" || "$GOOS" == "wasip1" ]]; then
          echo "Skipping special platform: $platform (requires custom build)"
          continue
          fi
          
          if [[ "$GOARCH" == "amd64" ]]; then
          for GOAMD64 in v1 v2 v3; do  # 包含 v1
          output_name="build/${GITHUB_REPOSITORY##*/}_${GOOS}_${GOARCH}${GOAMD64}${EXTS}"
          echo "Building for $GOOS/$GOARCH (GOAMD64=$GOAMD64)..."
          env GOOS="$GOOS" GOARCH="$GOARCH" GOAMD64="$GOAMD64" go build \
          -trimpath \
          -ldflags="-s -w -buildid= -extldflags='-fno-PIC'" \
          -gcflags="all=-l -B -trimpath=" \
          -o "$output_name" \
          -v ./internal/cmd || echo "Failed to build for $platform with $GOAMD64"
          done
          else
          output_name="build/${GITHUB_REPOSITORY##*/}_${GOOS}_${GOARCH}${EXTS}"
          echo "Building for $GOOS/$GOARCH..."
          env GOOS="$GOOS" GOARCH="$GOARCH" go build \
          -trimpath \
          -ldflags="-s -w -buildid= -extldflags='-fno-PIC'" \
          -gcflags="all=-l -B -trimpath=" \
          -o "$output_name" \
          -v ./internal/cmd || echo "Failed to build for $platform"
          fi
          done

      - name: Create or Update Release
        if: env.version != ''
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          name: NapCatShellUpdater (${{ env.version }})
          body: |
            ## Release Notes
            - **Version**: ${{ env.version }}
            - **Date**: ${{ github.event.head_commit.timestamp }}
            - **Changelog**: [Compare Changes](https://github.com/Sn0wo2/NapCatShellUpdater/compare/${{ github.event.before }}...${{ github.sha }})
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          files: |
            build/*